pipeline {
    agent any

    environment {
        DOCKERHUB_USERNAME = credentials('omribe')  // Jenkins stored credential
        DOCKERHUB_PASSWORD = credentials('dockerhub-password')  // Jenkins stored credential
        IMAGE_NAME = 'omribe/aws-dashboard'                     // Docker image name
        IMAGE_TAG = 'latest'                                    // Tag
    }

    stages {

        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/OmriBENE-codes/devops-end-project.git'
            }
        }

        stage('Parallel Checks') {
            parallel {
                stage('Linting (Mock)') {
                    steps {
                        echo 'Running mock linting for Python, Dockerfile, and Shell scripts...'
                        sh 'echo "flake8 main.py (mock)"'
                        sh 'echo "hadolint Dockerfile (mock)"'
                        sh 'echo "shellcheck *.sh (mock)"'
                    }
                }

                stage('Security Scan (Mock)') {
                    steps {
                        echo 'Running mock security scan for Python and Docker image...'
                        sh 'echo "bandit -r . (mock)"'
                        sh 'echo "trivy image $IMAGE_NAME:$IMAGE_TAG (mock)"'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image $IMAGE_NAME:$IMAGE_TAG"
                sh """
                    docker build -t $IMAGE_NAME:$IMAGE_TAG .
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image $IMAGE_NAME:$IMAGE_TAG to Docker Hub"
                sh """
                    echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                    docker push $IMAGE_NAME:$IMAGE_TAG
                """
            }
        }

    }

    post {
        success {
            echo 'Pipeline completed successfully (mock).'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
}
